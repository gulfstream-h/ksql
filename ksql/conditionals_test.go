package ksql

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBooleanExpression(t *testing.T) {
	tests := []struct {
		name      string
		left      Field
		right     any
		op        BooleanOperation
		wantExpr  string
		expectErr bool
	}{
		{
			name:      "Equal int",
			left:      F("schema.col"),
			right:     42,
			op:        equal,
			wantExpr:  "schema.col = 42",
			expectErr: false,
		},
		{
			name:      "Equal string",
			left:      F("schema.col"),
			right:     "foo",
			op:        equal,
			wantExpr:  "schema.col = 'foo'",
			expectErr: false,
		},
		{
			name:      "Equal nil",
			left:      F("schema.col"),
			right:     nil,
			op:        equal,
			wantExpr:  "schema.col IS NULL",
			expectErr: false,
		},
		{
			name:      "Equal boolean true",
			left:      F("schema.col"),
			right:     true,
			op:        equal,
			wantExpr:  "schema.col = TRUE",
			expectErr: false,
		},
		{
			name:      "Equal boolean false",
			left:      F("schema.col"),
			right:     false,
			op:        equal,
			wantExpr:  "schema.col = FALSE",
			expectErr: false,
		},
		{
			name:      "Equal float",
			left:      F("schema.col"),
			right:     3.14,
			op:        equal,
			wantExpr:  "schema.col = 3.14",
			expectErr: false,
		},
		{
			name:      "NotEqual string",
			left:      F("schema.col"),
			right:     "foo",
			op:        notEqual,
			wantExpr:  "schema.col != 'foo'",
			expectErr: false,
		},
		{
			name:      "Greater float",
			left:      F("schema.col"),
			right:     3.14,
			op:        more,
			wantExpr:  "schema.col > 3.14",
			expectErr: false,
		},
		{
			name:      "IsNull",
			left:      F("schema.col"),
			right:     nil,
			op:        isNull,
			wantExpr:  "schema.col IS NULL",
			expectErr: false,
		},
		{
			name:      "In list",
			left:      F("schema.col"),
			right:     []int{1, 2, 3},
			op:        in,
			wantExpr:  "schema.col IN (1, 2, 3)",
			expectErr: false,
		},
		{
			name:      "NotIn list",
			left:      F("schema.col"),
			right:     []string{"a", "b"},
			op:        notIn,
			wantExpr:  "schema.col NOT IN ('a', 'b')",
			expectErr: false,
		},
		{
			name:      "Unsupported type",
			left:      F("schema.col"),
			right:     struct{}{},
			op:        equal,
			wantExpr:  "", // depends on util.Serialize
			expectErr: true,
		},

		{
			name:      "Less int",
			left:      F("schema.col"),
			right:     10,
			op:        less,
			wantExpr:  "schema.col < 10",
			expectErr: false,
		},
		{
			name:      "GreaterEq string",
			left:      F("schema.col"),
			right:     "bar",
			op:        moreEqual,
			wantExpr:  "schema.col >= 'bar'",
			expectErr: false,
		},
		{
			name:      "LessEq float",
			left:      F("schema.col"),
			right:     2.71,
			op:        lessEqual,
			wantExpr:  "schema.col <= 2.71",
			expectErr: false,
		},
		{
			name:      "IsNotNull",
			left:      F("schema.col"),
			right:     nil,
			op:        isNotNull,
			wantExpr:  "schema.col IS NOT NULL",
			expectErr: false,
		},
		{
			name:      "In empty list",
			left:      F("schema.col"),
			right:     []int{},
			op:        in,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "NotIn mixed types",
			left:      F("schema.col"),
			right:     []any{1, "a", false},
			op:        notIn,
			wantExpr:  "schema.col NOT IN (1, 'a', FALSE)",
			expectErr: false,
		},

		{
			name:      "Greater int",
			left:      F("schema.col"),
			right:     100,
			op:        more,
			wantExpr:  "schema.col > 100",
			expectErr: false,
		},
		{
			name:      "LessEq int",
			left:      F("schema.col"),
			right:     50,
			op:        lessEqual,
			wantExpr:  "schema.col <= 50",
			expectErr: false,
		},
		{
			name:      "NotEqual float",
			left:      F("schema.col"),
			right:     1.23,
			op:        notEqual,
			wantExpr:  "schema.col != 1.23",
			expectErr: false,
		},
		{
			name:      "In single element",
			left:      F("schema.col"),
			right:     []int{42},
			op:        in,
			wantExpr:  "schema.col IN (42)",
			expectErr: false,
		},
		{
			name:      "NotIn single element",
			left:      F("schema.col"),
			right:     []string{"test"},
			op:        notIn,
			wantExpr:  "schema.col NOT IN ('test')",
			expectErr: false,
		},
		{
			name:      "IsTrue",
			left:      F("schema.col"),
			right:     nil,
			op:        isTrue,
			wantExpr:  "schema.col IS TRUE",
			expectErr: false,
		},
		{
			name:      "IsFalse",
			left:      F("schema.col"),
			right:     nil,
			op:        isFalse,
			wantExpr:  "schema.col IS FALSE",
			expectErr: false,
		},
		{
			name:      "Empty string",
			left:      F("schema.col"),
			right:     "",
			op:        equal,
			wantExpr:  "schema.col = ''",
			expectErr: false,
		},
		{
			name:      "Null in NotEqual",
			left:      F("schema.col"),
			right:     nil,
			op:        notEqual,
			wantExpr:  "schema.col IS NOT NULL",
			expectErr: false,
		},
		{
			name:      "Unsupported slice type",
			left:      F("schema.col"),
			right:     []struct{}{{}},
			op:        in,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Empty Field",
			left:      F(""),
			right:     42,
			op:        equal,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "GreaterEq int",
			left:      F("schema.col"),
			right:     10,
			op:        moreEqual,
			wantExpr:  "schema.col >= 10",
			expectErr: false,
		},
		{
			name:      "Less string",
			left:      F("schema.col"),
			right:     "abc",
			op:        less,
			wantExpr:  "schema.col < 'abc'",
			expectErr: false,
		},
		{
			name:      "Empty slice in IN",
			left:      F("schema.col"),
			right:     []string{},
			op:        in,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Empty slice in NOT IN",
			left:      F("schema.col"),
			right:     []string{},
			op:        notIn,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Boolean false in IN",
			left:      F("schema.col"),
			right:     []bool{false},
			op:        in,
			wantExpr:  "schema.col IN (FALSE)",
			expectErr: false,
		},
		{
			name:      "Boolean true in NOT IN",
			left:      F("schema.col"),
			right:     []bool{true},
			op:        notIn,
			wantExpr:  "schema.col NOT IN (TRUE)",
			expectErr: false,
		},
		{
			name:      "Float in IN",
			left:      F("schema.col"),
			right:     []float64{1.1, 2.2, 3.3},
			op:        in,
			wantExpr:  "schema.col IN (1.1, 2.2, 3.3)",
			expectErr: false,
		},
		{
			name:      "Float in NOT IN",
			left:      F("schema.col"),
			right:     []float64{1.1, 2.2},
			op:        notIn,
			wantExpr:  "schema.col NOT IN (1.1, 2.2)",
			expectErr: false,
		},
		{
			name:      "Null in IN",
			left:      F("schema.col"),
			right:     []any{nil},
			op:        in,
			wantExpr:  "schema.col IN (NULL)",
			expectErr: false,
		},
		{
			name:      "Null in NOT IN",
			left:      F("schema.col"),
			right:     []any{nil},
			op:        notIn,
			wantExpr:  "schema.col NOT IN (NULL)",
			expectErr: false,
		},
		{
			name:      "Mixed types in IN",
			left:      F("schema.col"),
			right:     []any{1, "a", true},
			op:        in,
			wantExpr:  "schema.col IN (1, 'a', TRUE)",
			expectErr: false,
		},
		{
			name:      "Mixed types in NOT IN",
			left:      F("schema.col"),
			right:     []any{1, "b", false},
			op:        notIn,
			wantExpr:  "schema.col NOT IN (1, 'b', FALSE)",
			expectErr: false,
		},
		{
			name:      "GreaterEq float",
			left:      F("schema.col"),
			right:     5.5,
			op:        moreEqual,
			wantExpr:  "schema.col >= 5.5",
			expectErr: false,
		},
		{
			name:      "LessEq string",
			left:      F("schema.col"),
			right:     "xyz",
			op:        lessEqual,
			wantExpr:  "schema.col <= 'xyz'",
			expectErr: false,
		},
		{
			name:      "Equal empty string",
			left:      F("schema.col"),
			right:     "",
			op:        equal,
			wantExpr:  "schema.col = ''",
			expectErr: false,
		},
		{
			name:      "NotEqual empty string",
			left:      F("schema.col"),
			right:     "",
			op:        notEqual,
			wantExpr:  "schema.col != ''",
			expectErr: false,
		},
		{
			name:      "GreaterEq boolean false",
			left:      F("schema.col"),
			right:     false,
			op:        moreEqual,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Less boolean false",
			left:      F("schema.col"),
			right:     true,
			op:        less,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Unsupported type in IN",
			left:      F("schema.col"),
			right:     []struct{}{{}},
			op:        in,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Empty Field",
			left:      F(""),
			right:     42,
			op:        equal,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Field without schema",
			left:      F("col"),
			right:     42,
			op:        equal,
			wantExpr:  "col = 42",
			expectErr: false,
		},
		{
			name:      "Field with schema",
			left:      F("schema.col"),
			right:     42,
			op:        equal,
			wantExpr:  "schema.col = 42",
			expectErr: false,
		},
		{
			name:      "Empty Field with schema",
			left:      F("schema."),
			right:     42,
			op:        equal,
			wantExpr:  "",
			expectErr: true,
		},
		{
			name:      "Two fields comparison",
			left:      F("schema.col1"),
			right:     F("schema.col2"),
			op:        equal,
			wantExpr:  "schema.col1 = schema.col2",
			expectErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			exp := NewBooleanExp(tt.left, tt.right, tt.op)
			got, err := exp.Expression()
			assert.Equal(t, tt.expectErr, err != nil)
			if !tt.expectErr {
				assert.Equal(t, tt.wantExpr, got)
			}
		})
	}
}
